from typing import List, Dict


# Name: Eric Opoku
# Fun fact: I built a cocoa-bean grading AI system that won an award in Ghana and was presented at a NeurIPS workshop.
# Course: DSE511 — Background Script

# imported libraries
from dataclasses import dataclass
from typing import List, Dict

@dataclass
class Profile:
    name: str
    program: str
    roles: List[str]
    interests: List[str]
    skills: Dict[str, int]  # 1–10 scale
    goals: List[str]
    fun_fact: str

def ascii_bar(value: int, max_len: int = 10) -> str:
    """Return a simple ASCII bar for a value in [0, 10]."""
    value = max(0, min(10, int(value)))
    return '█' * value + '·' * (max_len - value)

def domain_recommendation(interests: List[str]) -> str:
    """A tiny, playful recommender: map interests to a suggested project domain."""
    mapping = {
        'health': ['health', 'medical', 'clinical', 'diabetic', 'oncology'],
        'transport': ['traffic', 'transport', 'driving', 'vehicle', 'mobility'],
        'agriculture': ['cocoa', 'agric', 'farming', 'crop'],
        'finance': ['finance', 'crypto', 'market'],
    }
    scores = {k: 0 for k in mapping}
    for word in interests:
        lw = word.lower()
        for domain, keys in mapping.items():
            scores[domain] += any(k in lw for k in keys)
    # choose best domain; tie-breaker is alphabetical
    best = sorted(scores.items(), key=lambda kv: (-kv[1], kv[0]))[0][0]
    return best

def to_markdown_card(p: Profile) -> str:
    md = []
    md.append(f"# {p.name}")
    md.append('')
    md.append(f"**Program:** {p.program}")
    md.append('')
    md.append("**Roles:** " + ', '.join(p.roles))
    md.append("**Interests:** " + ', '.join(p.interests))
    md.append('')
    md.append("**Skills (self‑rated)**:")
    for k, v in p.skills.items():
        md.append(f"- {k:12} {ascii_bar(v)}  {v}/10")
    md.append('')
    md.append("**Goals:**")
    for g in p.goals:
        md.append(f"- {g}")
    md.append('')
    md.append(f"**Fun fact:** {p.fun_fact}")
    md.append('')
    md.append("_Generated by a tiny Python script for DSE511._")
    return '\n'.join(md)

def main():
    profile = Profile(
        name="Eric Opoku",
        program="Data Science & Engineering",
        roles=["Graduate Research Assistant"],
        interests=[
            "Computer Vision for health and traffic safety",
            "Cocoa quality (agriculture)",
            "Resource-aware multimodal AI",
        ],
        skills={
            "Python": 7, "R": 6, "SQL": 8, "PyTorch": 6, "Data Viz": 7
        },
        goals=[
            "Publish reproducible research with clear model cards",
            "Build lightweight, interpretable models for resource-constrained settings",
            "Collaborate across health, transport, and agriculture"
        ],
        fun_fact = "I built a cocoa-bean grading AI system that won an award in Ghana and was presented at a NeurIPS workshop.",
    )

    # A non‑trivial bit: suggest a project domain from interests
    domain = domain_recommendation(profile.interests)

    # Print a markdown 'index card' plus the recommendation
    print(to_markdown_card(profile))
    print("\nSuggested starter domain:", domain.title())

if __name__ == "__main__":
    main()
